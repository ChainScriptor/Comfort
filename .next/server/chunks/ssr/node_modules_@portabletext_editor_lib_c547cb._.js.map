{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"selector.is-selection-collapsed.js","sources":["file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.guards.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/selectors/selectors.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts"],"sourcesContent":["import {\n  isPortableTextListBlock,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\n\n/**\n * @alpha\n */\nexport type BehaviorGuards = ReturnType<typeof createGuards>\n\nexport function createGuards({schema}: {schema: EditorSchema}) {\n  function isListBlock(block: unknown): block is PortableTextListBlock {\n    return isPortableTextListBlock(block) && block._type === schema.block.name\n  }\n\n  function isTextBlock(block: unknown): block is PortableTextTextBlock {\n    return isPortableTextTextBlock(block) && block._type === schema.block.name\n  }\n\n  return {isListBlock, isTextBlock}\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextListBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const guards = createGuards(context)\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && guards.isListBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  const focusBlock = getFocusTextBlock({context})\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[2])\n      ? context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = ({context}) => {\n  const focusChild = getFocusChild({context})\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[context.value.length - 1]\n    ? context.value[context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: [KeyedSegment]}>\n> = ({context}) => {\n  if (!context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: [KeyedSegment]}> =\n    []\n  const startKey = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock({context})\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock({context})\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n","import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = ({context}) => {\n  return (\n    JSON.stringify(context.selection?.anchor.path) ===\n      JSON.stringify(context.selection?.focus.path) &&\n    context.selection?.anchor.offset === context.selection?.focus.offset\n  )\n}\n"],"names":["createGuards","schema","isListBlock","block","isPortableTextListBlock","_type","name","isTextBlock","isPortableTextTextBlock","getFocusBlock","context","key","selection","isKeySegment","focus","path","_key","undefined","node","value","find","getFocusListBlock","guards","focusBlock","getFocusTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getFirstBlock","getLastBlock","length","getSelectedBlocks","selectedBlocks","startKey","backward","anchor","endKey","push","getSelectionStartBlock","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","isSelectionCollapsed","JSON","stringify","offset"],"mappings":"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","ignoreList":[0,1,2]}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"file":"behavior.core.js","sources":["file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/utils/utils.block-offset.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/utils/utils.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/is-hotkey.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behaviors/behavior.types.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts"],"sourcesContent":["import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../../behaviors/behavior.types'\n\nexport function blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint:\n    | {path: [KeyedSegment, 'children', KeyedSegment]; offset: number}\n    | undefined\n\n  for (const block of value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (offsetLeft === 0) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: 0,\n        }\n        break\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n        break\n      }\n\n      offsetLeft -= child.text.length\n    }\n  }\n\n  return selectionPoint\n}\n\nexport function spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: {\n    path: [KeyedSegment, 'children', KeyedSegment]\n    offset: number\n  }\n}): BlockOffset | undefined {\n  let offset = 0\n\n  for (const block of value) {\n    if (block._key !== selectionPoint.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (child._key === selectionPoint.path[2]._key) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\n\nexport function isEmptyTextBlock(block: PortableTextBlock) {\n  if (!isPortableTextTextBlock(block)) {\n    return false\n  }\n\n  const onlyText = block.children.every(isPortableTextSpan)\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {KeyedSegment, PortableTextTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: 'annotation.add'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'annotation.remove'\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: 'annotation.toggle'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'blur'\n    }\n  | {\n      type: 'decorator.add'\n      decorator: string\n    }\n  | {\n      type: 'decorator.remove'\n      decorator: string\n    }\n  | {\n      type: 'decorator.toggle'\n      decorator: string\n    }\n  | {\n      type: 'delete.backward'\n      unit: TextUnit\n    }\n  | {\n      type: 'delete.forward'\n      unit: TextUnit\n    }\n  | {\n      type: 'focus'\n    }\n  | {\n      type: 'insert.block object'\n      placement: 'auto' | 'after' | 'before'\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'insert.inline object'\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'insert.break'\n    }\n  | {\n      type: 'insert.soft break'\n    }\n  | {\n      type: 'insert.text'\n      text: string\n      options?: TextInsertTextOptions\n    }\n  | {\n      type: 'list item.toggle'\n      listItem: string\n    }\n  | {\n      type: 'style.toggle'\n      style: string\n    }\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | {\n      type: 'copy'\n      data: DataTransfer\n    }\n  | {\n      type: 'key.down'\n      keyboardEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: 'key.up'\n      keyboardEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: 'paste'\n      data: DataTransfer\n    }\n\n/**\n * @beta\n */\nexport type BehaviorActionIntend =\n  | SyntheticBehaviorEvent\n  | {\n      type: 'insert.span'\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: 'insert.text block'\n      placement: 'auto' | 'after' | 'before'\n      textBlock?: {\n        children?: PortableTextTextBlock['children']\n      }\n    }\n  | {\n      type: 'list item.add'\n      listItem: string\n    }\n  | {\n      type: 'list item.remove'\n      listItem: string\n    }\n  | {\n      type: 'move.block'\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: 'move.block down'\n      at: [KeyedSegment]\n    }\n  | {\n      type: 'move.block up'\n      at: [KeyedSegment]\n    }\n  | {\n      type: 'noop'\n    }\n  | {\n      type: 'delete.block'\n      blockPath: [KeyedSegment]\n    }\n  | {\n      type: 'delete.text'\n      anchor: BlockOffset\n      focus: BlockOffset\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n  | {\n      type: 'reselect'\n    }\n  | {\n      type: 'select'\n      selection: EditorSelection\n    }\n  | {\n      type: 'select.previous block'\n    }\n  | {\n      type: 'select.next block'\n    }\n  | {\n      type: 'style.add'\n      style: string\n    }\n  | {\n      type: 'style.remove'\n      style: string\n    }\n  | {\n      type: 'text block.set'\n      at: [KeyedSegment]\n      level?: number\n      listItem?: string\n      style?: string\n    }\n  | {\n      type: 'text block.unset'\n      at: [KeyedSegment]\n      props: Array<'level' | 'listItem' | 'style'>\n    }\n\n/**\n * @beta\n */\nexport type BehaviorAction = BehaviorActionIntend & {\n  editor: PortableTextSlateEditor\n}\n\n/**\n * @beta\n */\nexport type BehaviorEvent = SyntheticBehaviorEvent | NativeBehaviorEvent\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = {\n  /**\n   * The internal editor event that triggers this behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<\n    PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>,\n    TGuardResponse\n  >\n  /**\n   * Array of behavior action sets.\n   */\n  actions: Array<BehaviorActionIntendSet<TBehaviorEventType, TGuardResponse>>\n}\n\n/**\n * @beta\n */\nexport type BehaviorGuard<\n  TBehaviorEvent extends BehaviorEvent,\n  TGuardResponse,\n> = ({\n  context,\n  event,\n}: {\n  context: EditorContext\n  event: TBehaviorEvent\n}) => TGuardResponse | false\n\n/**\n * @beta\n */\nexport type BehaviorActionIntendSet<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = (\n  {\n    context,\n    event,\n  }: {\n    context: EditorContext\n    event: PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorActionIntend>\n\n/**\n * @beta\n */\nexport function defineBehavior<\n  TAnyBehaviorEventType extends BehaviorEvent['type'],\n  TGuardResponse = true,\n>(behavior: Behavior<TAnyBehaviorEventType, TGuardResponse>): Behavior {\n  return behavior as unknown as Behavior\n}\n\n/**\n * @beta\n */\nexport type BlockOffset = {\n  path: [KeyedSegment]\n  offset: number\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {isEmptyTextBlock} from '../editor/utils/utils'\nimport * as selectors from '../selectors'\nimport {isHotkey} from '../utils/is-hotkey'\nimport {defineBehavior} from './behavior.types'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.keyboardEvent)\n    const focusBlockObject = selectors.getFocusBlockObject({context})\n    const nextBlock = selectors.getNextBlock({context})\n\n    return isArrowDown && focusBlockObject && !nextBlock\n  },\n  actions: [() => [{type: 'insert.text block', placement: 'after'}]],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.keyboardEvent)\n    const focusBlockObject = selectors.getFocusBlockObject({context})\n    const previousBlock = selectors.getPreviousBlock({context})\n\n    return isArrowUp && focusBlockObject && !previousBlock\n  },\n  actions: [\n    () => [\n      {type: 'insert.text block', placement: 'before'},\n      {type: 'select.previous block'},\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const focusBlockObject = selectors.getFocusBlockObject({context})\n    const collapsedSelection = selectors.isSelectionCollapsed({context})\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [() => [{type: 'insert.text block', placement: 'after'}]],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const previousBlock = selectors.getPreviousBlock({context})\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      {\n        type: 'delete.block',\n        blockPath: focusTextBlock.path,\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({context}) => {\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const nextBlock = selectors.getNextBlock({context})\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      {\n        type: 'delete.block',\n        blockPath: focusTextBlock.path,\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defineBehavior} from './behavior.types'\n\nconst decoratorAdd = defineBehavior({\n  on: 'decorator.add',\n  actions: [\n    ({event}) => [\n      event,\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorRemove = defineBehavior({\n  on: 'decorator.remove',\n  guard: ({event}) => ({decorator: event.decorator}),\n  actions: [\n    ({event}) => [\n      event,\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorToggle = defineBehavior({\n  on: 'decorator.toggle',\n  guard: ({event}) => ({decorator: event.decorator}),\n  actions: [\n    ({event}) => [\n      event,\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nexport const coreDecoratorBehaviors = {\n  decoratorAdd,\n  decoratorRemove,\n  decoratorToggle,\n}\n","import {createGuards} from '../behavior-actions/behavior.guards'\nimport {isEmptyTextBlock} from '../editor/utils/utils'\nimport * as selectors from '../selectors'\nimport {isHotkey} from '../utils/is-hotkey'\nimport {defineBehavior} from './behavior.types'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const focusSpan = selectors.getFocusSpan({context})\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      {\n        type: 'text block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      },\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const focusTextBlock = selectors.getFocusTextBlock({context})\n    const focusSpan = selectors.getFocusSpan({context})\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      {\n        type: 'text block.set',\n        level,\n        at: focusTextBlock.path,\n      },\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed({context})\n    const focusListBlock = selectors.getFocusListBlock({context})\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      {\n        type: 'text block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      },\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isTab = isHotkey('Tab', event.keyboardEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks({context})\n    const guards = createGuards(context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) => ({\n        type: 'text block.set',\n        level: Math.min(\n          MAX_LIST_LEVEL,\n          Math.max(1, selectedListBlock.node.level + 1),\n        ),\n        at: selectedListBlock.path,\n      })),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.keyboardEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks({context})\n    const guards = createGuards(context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) => ({\n        type: 'text block.set',\n        level: Math.min(\n          MAX_LIST_LEVEL,\n          Math.max(1, selectedListBlock.node.level - 1),\n        ),\n        at: selectedListBlock.path,\n      })),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreListBehaviors} from './behavior.core.lists'\nimport {defineBehavior} from './behavior.types'\n\nconst softReturn = defineBehavior({\n  on: 'insert.soft break',\n  actions: [() => [{type: 'insert.text', text: '\\n'}]],\n})\n\n/**\n * @beta\n */\nexport const coreBehaviors = [\n  softReturn,\n  coreDecoratorBehaviors.decoratorAdd,\n  coreDecoratorBehaviors.decoratorRemove,\n  coreDecoratorBehaviors.decoratorToggle,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n]\n\n/**\n * @beta\n */\nexport const coreBehavior = {\n  softReturn,\n  decorators: coreDecoratorBehaviors,\n  blockObjects: coreBlockObjectBehaviors,\n  lists: coreListBehaviors,\n}\n"],"names":["blockOffsetToSpanSelectionPoint","value","blockOffset","offsetLeft","offset","selectionPoint","block","_key","path","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","spanSelectionPointToBlockOffset","isEmptyTextBlock","onlyText","every","blockText","getTextBlockText","map","join","IS_MAC","window","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","left","mod","opt","option","return","right","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","event","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","hotkeySegment","slice","keyName","toKeyName","modifier","alias","code","undefined","TypeError","key","keyCode","toKeyCode","toLowerCase","name","toUpperCase","charCodeAt","defineBehavior","behavior","arrowDownOnLonelyBlockObject","on","guard","context","isArrowDown","keyboardEvent","focusBlockObject","selectors","nextBlock","actions","type","placement","arrowUpOnLonelyBlockObject","isArrowUp","previousBlock","breakingBlockObject","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","node","_","blockPath","selection","anchor","focus","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","decoratorAdd","decoratorRemove","decorator","decoratorToggle","coreDecoratorBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","focusSpan","level","props","at","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedBlocks","guards","createGuards","selectedListBlocks","flatMap","isListBlock","selectedListBlock","Math","min","max","unindentListOnShiftTab","coreListBehaviors","softReturn","coreBehaviors","coreBehavior","decorators","blockObjects","lists"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7]}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 758, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/create-editor-schema.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/define-schema.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/debug.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/paths.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/ranges.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/selection.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/values.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/weakMaps.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/nodes/DefaultObject.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/nodes/index.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/components/DraggableBlock.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/components/Element.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/nodes/DefaultAnnotation.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/schema.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/validateValue.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/withChanges.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/withoutPatching.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.1.2/node_modules/%40sanity/diff-match-patch/dist/index.js","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/withUndoRedo.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/components/Synchronizer.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/operationToPatches.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/applyPatch.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextBlockStyle.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/node_modules/.pnpm/%40portabletext%2Btoolkit%402.0.16/node_modules/%40portabletext/toolkit/dist/index.js","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/utils/sibling-utils.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextSelections.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.list-item.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.style.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action-utils.insert-block.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-block-object.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-break.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-inline-object.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-span.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.text-block.set.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.text-block.unset.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/behavior-actions/behavior.actions.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/get-active-decorators.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/get-value.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/components/Leaf.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/plugins/createWithInsertData.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/withSyncRangeDecorations.ts","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/Editable.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx","file://C%3A/Users/sefea/Desktop/build/comfort/node_modules/%40portabletext/editor/src/editor/editor-event-listener.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport type {JSX} from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {assign, emit, setup} from 'xstate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\n\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingPatches: Array<Patch>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as {type: 'patch'; patch: Patch},\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutation': emit(({context}) => ({\n      type: 'mutation' as const,\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(\n        context.slateEditor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(context.slateEditor),\n      ),\n    })),\n    'clear pending patches': assign({\n      pendingPatches: [],\n    }),\n    'defer patch': assign({\n      pendingPatches: ({context, event}) => [\n        ...context.pendingPatches,\n        event.patch,\n      ],\n    }),\n  },\n  guards: {\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      on: {\n        patch: {\n          actions: ['defer patch', 'emit has pending patches'],\n          target: 'has pending patches',\n        },\n      },\n    },\n    'has pending patches': {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [\n          {\n            guard: 'slate is normalizing',\n            target: 'idle',\n            actions: ['emit mutation', 'clear pending patches'],\n          },\n          {\n            reenter: true,\n          },\n        ],\n      },\n      on: {\n        patch: {\n          actions: ['defer patch'],\n          reenter: true,\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {validateValue} from '../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../utils/values'\nimport {isChangingRemotely, withRemoteChanges} from '../utils/withChanges'\nimport {withoutPatching} from '../utils/withoutPatching'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      return (\n        !context.readOnly &&\n        (context.isProcessingLocalChanges ||\n          (isChangingRemotely(context.slateEditor) ?? false))\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) =>\n      !(\n        context.previousValue === undefined &&\n        context.pendingValue === undefined\n      ) && isEqual(context.pendingValue, context.previousValue),\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: ['emit done syncing initial value'],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                reenter: true,\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nconst debug = debugWithName('hook:useSyncValue')\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      props.editorActor.send(event)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      mutationActorRef.send(event)\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          case 'annotation.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.add',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.remove',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.toggle',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'blur': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'blur',\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.add',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.remove',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.toggle',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'focus': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'focus',\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.block object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.block object',\n                placement: event.placement,\n                blockObject: event.blockObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.inline object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.inline object',\n                inlineObject: event.inlineObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'list item.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'list item.toggle',\n                listItem: event.listItem,\n              },\n              editor,\n            })\n            break\n          }\n          case 'style.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'style.toggle',\n                style: event.style,\n              },\n              editor,\n            })\n            break\n          }\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    editor.addMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.add',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.removeMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.remove',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n    editor.onChange()\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (\n        hasChanges &&\n        !editorActor.getSnapshot().matches({setup: 'setting up'})\n      ) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEqualToEmptyEditor} from '../utils/values'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n    }\n\n    if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n      Transforms.removeNodes(editor, {at: focusBlockPath})\n    }\n  }\n}\n","import {toSlateValue} from '../utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan?.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan?.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      return\n    }\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode && !selectionAcrossBlocks) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert.break'},\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockSetActionImplementation: BehaviorActionImplementation<\n  'text block.set'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      ...(action.style ? {style: action.style} : {}),\n      ...(action.listItem ? {listItem: action.listItem} : {}),\n      ...(action.level ? {level: action.level} : {}),\n    },\n    {at},\n  )\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockUnsetActionImplementation: BehaviorActionImplementation<\n  'text block.unset'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.unsetNodes(action.editor, action.props, {at})\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  insertText,\n  Path,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {blockOffsetToSpanSelectionPoint} from '../editor/utils/utils.block-offset'\nimport type {PickFromUnion} from '../type-utils'\nimport {toSlatePath} from '../utils/paths'\nimport {toSlateRange} from '../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\nimport {textBlockSetActionImplementation} from './behavior.action.text-block.set'\nimport {textBlockUnsetActionImplementation} from './behavior.action.text-block.unset'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete.backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'reselect': ({action}) => {\n    const selection = action.editor.selection\n\n    if (selection) {\n      Transforms.select(action.editor, {...selection})\n      action.editor.selection = {...selection}\n    }\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n  'text block.set': textBlockSetActionImplementation,\n  'text block.unset': textBlockUnsetActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'reselect': {\n      behaviorActionImplementations.reselect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.set': {\n      behaviorActionImplementations['text block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.unset': {\n      behaviorActionImplementations['text block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\nimport type {EditorContext} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\n\nexport * from 'xstate/guards'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {type: 'done syncing initial value'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | OmitFromUnion<\n      InternalEditorEmittedEvent,\n      'type',\n      'ready' | 'read only' | 'editable'\n    >\n\n/**\n * @public\n */\nexport type EditorEmittedEvent = PickFromUnion<\n  InternalEditorEmittedEvent,\n  'type',\n  | 'blurred'\n  | 'done loading'\n  | 'editable'\n  | 'error'\n  | 'focused'\n  | 'invalid value'\n  | 'loading'\n  | 'mutation'\n  | 'patch'\n  | 'read only'\n  | 'ready'\n  | 'selection'\n  | 'value changed'\n>\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blurred'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focused'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n  | {type: 'read only'}\n  | {type: 'editable'}\n  | PickFromUnion<\n      SyntheticBehaviorEvent,\n      'type',\n      | 'annotation.add'\n      | 'annotation.remove'\n      | 'annotation.toggle'\n      | 'blur'\n      | 'decorator.add'\n      | 'decorator.remove'\n      | 'decorator.toggle'\n      | 'insert.block object'\n      | 'insert.inline object'\n      | 'list item.toggle'\n      | 'focus'\n      | 'style.toggle'\n    >\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return event.behaviors\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      const defaultAction =\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        if (!defaultAction) {\n          return\n        }\n\n        Editor.withoutNormalizing(event.editor, () => {\n          performAction({\n            context,\n            action: defaultAction,\n          })\n        })\n        event.editor.onChange()\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      const editorContext = {\n        activeDecorators: getActiveDecorators({\n          schema: context.schema,\n          slateEditorInstance: event.editor,\n        }),\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value,\n      } satisfies EditorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorContext,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n\n          if (\n            actionIntends.some(\n              (actionIntend) => actionIntend.type === 'reselect',\n            )\n          ) {\n            enqueue.raise({\n              type: 'selection',\n              selection: toPortableTextRange(\n                event.editor.children,\n                event.editor.selection,\n                context.schema,\n              ),\n            })\n          }\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (!defaultAction) {\n          return\n        }\n\n        Editor.withoutNormalizing(event.editor, () => {\n          performAction({\n            context,\n            action: defaultAction,\n          })\n        })\n        event.editor.onChange()\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors ?? coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => event),\n      ],\n    },\n    'blurred': {actions: emit(({event}) => event)},\n    'focused': {actions: emit(({event}) => event)},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'annotation.add': {\n              actions: emit(({event}) => event),\n            },\n            'annotation.remove': {\n              actions: emit(({event}) => event),\n            },\n            'annotation.toggle': {\n              actions: emit(({event}) => event),\n            },\n            'blur': {\n              actions: emit(({event}) => event),\n            },\n            'decorator.*': {\n              actions: emit(({event}) => event),\n            },\n            'focus': {\n              actions: emit(({event}) => event),\n            },\n            'insert.*': {\n              actions: emit(({event}) => event),\n            },\n            'list item.*': {\n              actions: emit(({event}) => event),\n            },\n            'style.*': {\n              actions: emit(({event}) => event),\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: 'normalizing',\n                },\n                patch: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                mutation: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            patch: {\n              actions: 'emit patch event',\n            },\n            mutation: {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\n\nexport function getValue({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  return fromSlateValue(\n    slateEditorInstance.children,\n    editorActorSnapshot.context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditorInstance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: editor._internal.slateEditor.instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({editorActorSnapshot, slateEditorInstance}),\n    },\n  }\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditableAPI} from '../types/editor'\nimport {compileType} from '../utils/schema'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type InternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent = PickFromUnion<\n  InternalEditorEvent,\n  'type',\n  | 'annotation.add'\n  | 'annotation.remove'\n  | 'annotation.toggle'\n  | 'blur'\n  | 'decorator.add'\n  | 'decorator.remove'\n  | 'decorator.toggle'\n  | 'focus'\n  | 'insert.block object'\n  | 'insert.inline object'\n  | 'list item.toggle'\n  | 'style.toggle'\n  | 'patches'\n  | 'update behaviors'\n  | 'update readOnly'\n  | 'update value'\n>\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-expect-error\n        listener,\n      ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {compileType} from '../utils/schema'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'annotation.add':\n        case 'annotation.remove':\n        case 'annotation.toggle':\n        case 'blur':\n        case 'decorator.add':\n        case 'decorator.remove':\n        case 'decorator.toggle':\n        case 'focus':\n        case 'insert.block object':\n        case 'insert.inline object':\n        case 'list item.toggle':\n        case 'style.toggle':\n        case 'patches':\n        case 'editable':\n        case 'read only':\n          break\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {isHotkey} from '../../utils/is-hotkey'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {createWithInsertData} from './plugins/createWithInsertData'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor-machine'\nimport {useEditor} from './editor-provider'\n\n/**\n * @public\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","undefined","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","text","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","props","$","t0","JSON","stringify","t1","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","level","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","node","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","listItem","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","mutationMachine","setup","context","events","input","emitted","actions","emit","patches","pendingPatches","snapshot","slateEditor","assign","patch","guards","slate is normalizing","isNormalizing","createMachine","id","initial","states","on","after","guard","reenter","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","i18n","some","index","isPlainObject","String","values","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","debugVerbose","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","err","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newProperties","blockIndex","syncValueCallback","sendBack","streamBlocks","syncValueLogic","fromCallback","syncMachine","initialValueSynced","assertEvent","pendingValue","previousValue","initial value synced","is busy","isProcessingLocalChanges","value changed while syncing","pending value equals previous value","actors","always","entry","idle","busy","syncing","invoke","src","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","i","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","insertText","voids","Synchronizer","useSelector","_temp","_temp2","syncActorRef","useActorRef","mutationActorRef","subscription","send","subscription_0","s_0","s","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","maxBlocks","behaviorEvent","placement","addMark","removeMark","deleteBackward","unit","deleteForward","insertBreak","insertSoftBreak","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","isEditor","Node","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","defaultStyle","nodeEntry","SlateText","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","addDecoratorActionImplementation","split","hanging","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","toggleListItemActionImplementation","isListItemActive","removeListItemActionImplementation","addListItemActionImplementation","createGuards","selectedBlocks","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","focusBlock","descendant","focusChild","insertChild","focusChildPath","focusNode","move","distance","insertBlock","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","reduce","accMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","toggleAnnotationActionImplementation","focusBlockPath","lastBlock","insertBlockObjectActionImplementation","insertBreakActionImplementation","focusDecorators","focusAnnotations","anchorBlockPath","start","end","edges","lastFocusBlockChild","atTheEndOfBlock","atTheStartOfBlock","nextBlockPath","selectionAcrossBlocks","splitNodes","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","insertSoftBreakActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","textBlockSetActionImplementation","textBlockUnsetActionImplementation","behaviorActionImplementations","delete.backward","delete.forward","delete.block","delete.text","blockOffsetToSpanSelectionPoint","blockOffset","insert.text","insert.text block","effect","move.block","move.block down","move.block up","hasPrevious","previous","noop","newSelection","select.previous block","previousBlockPath","select.next block","reselect","performAction","performDefaultAction","getActiveDecorators","slateEditorInstance","editorMachine","behaviors","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","behavior","editorContext","activeDecorators","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntends","actionIntend","raise","nativeEvent","coreBehaviors","initialReadOnly","exit","normalizing","mutation","editorActorSnapshot","defaultCompare","a","b","useEditorSelector","selector","compare","_internal","getEditorSnapshot","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","createActor","editorConfigToMachineInput","createEditorFromActor","useCreateEditor","schemaDefinition","hasOwnProperty","editable","listener","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","PortableTextEditor","Component","change$","Subject","constructor","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","window","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","possibleMark","possibleCommand","command","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","_regenerateKeys","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","editorTypes","newNode","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSlate","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","handlePaste","onPasteResult","then","result","catch","finally","handleOnFocus","isDefaultPrevented","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","EditorContext","React","EditorProvider","initialConfig","useEditor","EditorEventListener"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66]}},
    {"offset": {"line": 8608, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}