{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/env.ts"],"sourcesContent":["export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2024-12-23'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aACX,QAAQ,GAAG,CAAC,8BAA8B,IAAI;AAEzC,MAAM,UAAU,4DAErB;AAGK,MAAM,YAAY,0DAEvB;AAGF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/categoryType.ts"],"sourcesContent":["import { TagIcon } from '@sanity/icons'\nimport { defineField, defineType } from 'sanity'\n\n\nexport const categoryType = defineType({\n  name: 'category',\n  title: 'Category',\n  type: 'document',\n  icon: TagIcon,\n  fields: [\n    defineField({\n      name: 'title',\n      type: 'string',\n    }),\n    defineField({\n      name: 'slug',\n      type: 'slug',\n      options: {\n        source: 'title',\n      },\n    }),\n    defineField({\n      name: 'description',\n      type: 'text',\n    }),\n    defineField({\n      name: 'image',\n      title: \"Category Image\",\n      type: 'image',\n      options: {\n        hotspot: true,\n      },\n    }),\n  ],\n  preview: {\n    select: {\n      title: 'title',\n      subtitle: 'description',\n      media: 'image',\n    },\n  },\n})\n"],"names":[],"mappings":";;;AACA;AADA;;;AAIO,MAAM,eAAe,CAAA,GAAA,kJAAA,CAAA,aAAU,AAAD,EAAE;IACrC,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM,kJAAA,CAAA,UAAO;IACb,QAAQ;QACN,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,SAAS;gBACP,QAAQ;YACV;QACF;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,SAAS;gBACP,SAAS;YACX;QACF;KACD;IACD,SAAS;QACP,QAAQ;YACN,OAAO;YACP,UAAU;YACV,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/productType.ts"],"sourcesContent":["import { TrolleyIcon } from \"@sanity/icons\";\r\nimport { defineType } from \"sanity\";\r\nimport { defineField } from \"sanity\";\r\n\r\nexport const productType = defineType({\r\n    name: \"product\",\r\n    title: \"Product\",\r\n    type: \"document\",\r\n    icon: TrolleyIcon,\r\n    fields: [\r\n        defineField({\r\n            name: \"name\",\r\n            title: \"Product Name\",\r\n            type: \"string\",\r\n            validation: (Rule) => Rule.required(),\r\n        }),\r\n        defineField({\r\n            name: \"slug\",\r\n            title: \"Slug\",\r\n            type: \"slug\",\r\n            options: {\r\n                source: \"name\",\r\n                maxLength: 96,\r\n            },\r\n            validation: (Rule) => Rule.required(),\r\n        }),\r\n        defineField({\r\n            name: \"images\",\r\n            title: \"Product Images\",\r\n            type: \"array\",\r\n            of: [{ type: \"image\", options: { hotspot: true } }],\r\n        }),\r\n        defineField({\r\n            name: \"intro\",\r\n            title: \"Product Intro\",\r\n            type: \"string\",\r\n        }),\r\n        defineField({\r\n            name: \"description\",\r\n            title: \"Description\",\r\n            type: \"string\",\r\n        }),\r\n        defineField({\r\n            name: 'price',\r\n            title: 'Product Price',\r\n            type: 'number',\r\n            validation: (Rule) => Rule.required(),\r\n        }),\r\n        defineField({\r\n            name: 'discount',\r\n            title: 'Discount Price',\r\n            type: 'number',\r\n            validation: (Rule) => Rule.required(),\r\n        }),\r\n        defineField({\r\n            name: 'categories',\r\n            title: 'Categories',\r\n            type: 'array',\r\n            of: [{ type: 'reference', to: { type: 'category' } }],\r\n        }),\r\n        defineField({\r\n            name: 'stock',\r\n            title: 'Stock',\r\n            type: 'number',\r\n            validation: (Rule) => Rule.min(0),\r\n        }),\r\n        defineField({\r\n            name: 'status',\r\n            title: 'Product Status',\r\n            type: 'string',\r\n            options: {\r\n                list: [\r\n                    { title: 'New', value: 'new' },\r\n                    { title: 'Hot', value: 'hot' },\r\n                    { title: 'Sale', value: 'sale' },\r\n                ],\r\n            },\r\n        }),\r\n        defineField({\r\n            name: 'variant',\r\n            title: 'Product Type',\r\n            type: 'string',\r\n            options: {\r\n                list: [\r\n                    { title: 'New', value: 'new' },\r\n                    { title: 'Italian', value: 'italian' },\r\n                    { title: 'Creams', value: 'creams' },\r\n                    { title: 'Molecular', value: 'molecular' },\r\n                    { title: 'Pasta', value: 'pasta' },\r\n                ],\r\n            },\r\n        }),\r\n    ],\r\n    preview: {\r\n        select: {\r\n            title: 'name',\r\n            subtitle: 'price',\r\n            media: 'images',\r\n        },\r\n        prepare(selection) {\r\n            const { title, subtitle, media } = selection;\r\n            const image = media && media[0];\r\n            return {\r\n                title: title,\r\n                subtitle: `$${subtitle}`,\r\n                media: image,\r\n            };\r\n        },\r\n    },\r\n});\r\n"],"names":[],"mappings":";;;AACA;AADA;;;;AAIO,MAAM,cAAc,CAAA,GAAA,kJAAA,CAAA,aAAU,AAAD,EAAE;IAClC,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM,kJAAA,CAAA,cAAW;IACjB,QAAQ;QACJ,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,YAAY,CAAC,OAAS,KAAK,QAAQ;QACvC;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,SAAS;gBACL,QAAQ;gBACR,WAAW;YACf;YACA,YAAY,CAAC,OAAS,KAAK,QAAQ;QACvC;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,IAAI;gBAAC;oBAAE,MAAM;oBAAS,SAAS;wBAAE,SAAS;oBAAK;gBAAE;aAAE;QACvD;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;QACV;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;QACV;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,YAAY,CAAC,OAAS,KAAK,QAAQ;QACvC;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,YAAY,CAAC,OAAS,KAAK,QAAQ;QACvC;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,IAAI;gBAAC;oBAAE,MAAM;oBAAa,IAAI;wBAAE,MAAM;oBAAW;gBAAE;aAAE;QACzD;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,YAAY,CAAC,OAAS,KAAK,GAAG,CAAC;QACnC;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,SAAS;gBACL,MAAM;oBACF;wBAAE,OAAO;wBAAO,OAAO;oBAAM;oBAC7B;wBAAE,OAAO;wBAAO,OAAO;oBAAM;oBAC7B;wBAAE,OAAO;wBAAQ,OAAO;oBAAO;iBAClC;YACL;QACJ;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACR,MAAM;YACN,OAAO;YACP,MAAM;YACN,SAAS;gBACL,MAAM;oBACF;wBAAE,OAAO;wBAAO,OAAO;oBAAM;oBAC7B;wBAAE,OAAO;wBAAW,OAAO;oBAAU;oBACrC;wBAAE,OAAO;wBAAU,OAAO;oBAAS;oBACnC;wBAAE,OAAO;wBAAa,OAAO;oBAAY;oBACzC;wBAAE,OAAO;wBAAS,OAAO;oBAAQ;iBACpC;YACL;QACJ;KACH;IACD,SAAS;QACL,QAAQ;YACJ,OAAO;YACP,UAAU;YACV,OAAO;QACX;QACA,SAAQ,SAAS;YACb,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;YACnC,MAAM,QAAQ,SAAS,KAAK,CAAC,EAAE;YAC/B,OAAO;gBACH,OAAO;gBACP,UAAU,CAAC,CAAC,EAAE,UAAU;gBACxB,OAAO;YACX;QACJ;IACJ;AACJ"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/index.ts"],"sourcesContent":["import { type SchemaTypeDefinition } from 'sanity'\n\nimport { categoryType } from './categoryType'\nimport { productType } from './productType'\n\n\nexport const schema: { types: SchemaTypeDefinition[] } = {\n  types: [categoryType, productType],\n}\n"],"names":[],"mappings":";;;AAEA;AACA;;;AAGO,MAAM,SAA4C;IACvD,OAAO;QAAC,qIAAA,CAAA,eAAY;QAAE,oIAAA,CAAA,cAAW;KAAC;AACpC"}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/structure.ts"],"sourcesContent":["import type { StructureResolver } from 'sanity/structure'\n\n// https://www.sanity.io/docs/structure-builder-cheat-sheet\nexport const structure: StructureResolver = (S) =>\n  S.list()\n    .title('Comfort Backend')\n    .items([\n      S.documentTypeListItem('category').title('Categories'),\n      S.divider(),\n      ...S.documentTypeListItems().filter(\n        (item) => item.getId() && !['category'].includes(item.getId()!),\n      ),\n    ])\n"],"names":[],"mappings":";;;AAGO,MAAM,YAA+B,CAAC,IAC3C,EAAE,IAAI,GACH,KAAK,CAAC,mBACN,KAAK,CAAC;QACL,EAAE,oBAAoB,CAAC,YAAY,KAAK,CAAC;QACzC,EAAE,OAAO;WACN,EAAE,qBAAqB,GAAG,MAAM,CACjC,CAAC,OAAS,KAAK,KAAK,MAAM,CAAC;gBAAC;aAAW,CAAC,QAAQ,CAAC,KAAK,KAAK;KAE9D"}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 407, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity.config.ts"],"sourcesContent":["'use client'\n\n/**\n * This configuration is used to for the Sanity Studio that’s mounted on the `\\app\\studio\\[[...tool]]\\page.tsx` route\n */\n\nimport {visionTool} from '@sanity/vision'\nimport {defineConfig} from 'sanity'\nimport {structureTool} from 'sanity/structure'\n\n// Go to https://www.sanity.io/docs/api-versioning to learn how API versioning works\nimport {apiVersion, dataset, projectId} from './sanity/env'\nimport {schema} from './sanity/schemaTypes'\nimport {structure} from './sanity/structure'\n\nexport default defineConfig({\n  basePath: '/studio',\n  projectId,\n  dataset,\n  // Add and edit the content schema in the './sanity/schemaTypes' folder\n  schema,\n  plugins: [\n    structureTool({structure}),\n    // Vision is for querying with GROQ from inside the Studio\n    // https://www.sanity.io/docs/the-vision-plugin\n    visionTool({defaultApiVersion: apiVersion}),\n  ],\n})\n"],"names":[],"mappings":";;;AAUA,oFAAoF;AACpF;AACA;AACA;AANA;AACA;AANA;;CAEC,GAED;AANA;;;;;;;uCAee,CAAA,GAAA,uJAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,UAAU;IACV,WAAA,6GAAA,CAAA,YAAS;IACT,SAAA,6GAAA,CAAA,UAAO;IACP,uEAAuE;IACvE,QAAA,8HAAA,CAAA,SAAM;IACN,SAAS;QACP,CAAA,GAAA,uJAAA,CAAA,gBAAa,AAAD,EAAE;YAAC,WAAA,mHAAA,CAAA,YAAS;QAAA;QACxB,0DAA0D;QAC1D,+CAA+C;QAC/C,CAAA,GAAA,oKAAA,CAAA,aAAU,AAAD,EAAE;YAAC,mBAAmB,6GAAA,CAAA,aAAU;QAAA;KAC1C;AACH"}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}