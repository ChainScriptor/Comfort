{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/env.ts"],"sourcesContent":["export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2024-12-23'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aACX,QAAQ,GAAG,CAAC,8BAA8B,IAAI;AAEzC,MAAM,UAAU,4DAErB;AAGK,MAAM,YAAY,0DAEvB;AAGF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/categoryType.ts"],"sourcesContent":["import { TagIcon } from '@sanity/icons'\nimport { defineField, defineType } from 'sanity'\n\nexport const categoryType = defineType({\n  name: 'category',\n  title: 'Category',\n  type: 'document',\n  icon: TagIcon,\n  fields: [\n    defineField({\n      name: 'title',\n      type: 'string',\n    }),\n    defineField({\n      name: 'slug',\n      type: 'slug',\n      options: {\n        source: 'title',\n      },\n    }),\n    defineField({\n      name: 'description',\n      type: 'text',\n    }),\n    defineField({\n      name: 'image',\n      title: \"Category Image\",\n      type: 'image',\n      options: {\n        hotspot: true,\n      },\n    }),\n  ],\n  preview: {\n    select: {\n      title: 'title',\n      subtitle: 'description',\n      media: 'image',\n    },\n  },\n})\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGO,MAAM,eAAe,CAAA,GAAA,kJAAA,CAAA,aAAU,AAAD,EAAE;IACrC,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM,kJAAA,CAAA,UAAO;IACb,QAAQ;QACN,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,SAAS;gBACP,QAAQ;YACV;QACF;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,SAAS;gBACP,SAAS;YACX;QACF;KACD;IACD,SAAS;QACP,QAAQ;YACN,OAAO;YACP,UAAU;YACV,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/index.ts"],"sourcesContent":["import { type SchemaTypeDefinition } from 'sanity'\n\nimport { categoryType } from './categoryType'\n\n\nexport const schema: { types: SchemaTypeDefinition[] } = {\n  types: [categoryType],\n}\n"],"names":[],"mappings":";;;AAEA;;AAGO,MAAM,SAA4C;IACvD,OAAO;QAAC,qIAAA,CAAA,eAAY;KAAC;AACvB"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/structure.ts"],"sourcesContent":["import type { StructureResolver } from 'sanity/structure'\n\n// https://www.sanity.io/docs/structure-builder-cheat-sheet\nexport const structure: StructureResolver = (S) =>\n  S.list()\n    .title('Comfort Backend')\n    .items([\n      S.documentTypeListItem('category').title('Categories'),\n      S.divider(),\n      ...S.documentTypeListItems().filter(\n        (item) => item.getId() && !['category'].includes(item.getId()!),\n      ),\n    ])\n"],"names":[],"mappings":";;;AAGO,MAAM,YAA+B,CAAC,IAC3C,EAAE,IAAI,GACH,KAAK,CAAC,mBACN,KAAK,CAAC;QACL,EAAE,oBAAoB,CAAC,YAAY,KAAK,CAAC;QACzC,EAAE,OAAO;WACN,EAAE,qBAAqB,GAAG,MAAM,CACjC,CAAC,OAAS,KAAK,KAAK,MAAM,CAAC;gBAAC;aAAW,CAAC,QAAQ,CAAC,KAAK,KAAK;KAE9D"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity.config.ts"],"sourcesContent":["'use client'\n\n/**\n * This configuration is used to for the Sanity Studio thatâ€™s mounted on the `\\app\\studio\\[[...tool]]\\page.tsx` route\n */\n\nimport {visionTool} from '@sanity/vision'\nimport {defineConfig} from 'sanity'\nimport {structureTool} from 'sanity/structure'\n\n// Go to https://www.sanity.io/docs/api-versioning to learn how API versioning works\nimport {apiVersion, dataset, projectId} from './sanity/env'\nimport {schema} from './sanity/schemaTypes'\nimport {structure} from './sanity/structure'\n\nexport default defineConfig({\n  basePath: '/studio',\n  projectId,\n  dataset,\n  // Add and edit the content schema in the './sanity/schemaTypes' folder\n  schema,\n  plugins: [\n    structureTool({structure}),\n    // Vision is for querying with GROQ from inside the Studio\n    // https://www.sanity.io/docs/the-vision-plugin\n    visionTool({defaultApiVersion: apiVersion}),\n  ],\n})\n"],"names":[],"mappings":";;;AAUA,oFAAoF;AACpF;AACA;AACA;AANA;AACA;AANA;;CAEC,GAED;AANA;;;;;;;uCAee,CAAA,GAAA,uJAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,UAAU;IACV,WAAA,6GAAA,CAAA,YAAS;IACT,SAAA,6GAAA,CAAA,UAAO;IACP,uEAAuE;IACvE,QAAA,8HAAA,CAAA,SAAM;IACN,SAAS;QACP,CAAA,GAAA,uJAAA,CAAA,gBAAa,AAAD,EAAE;YAAC,WAAA,mHAAA,CAAA,YAAS;QAAA;QACxB,0DAA0D;QAC1D,+CAA+C;QAC/C,CAAA,GAAA,oKAAA,CAAA,aAAU,AAAD,EAAE;YAAC,mBAAmB,6GAAA,CAAA,aAAU;QAAA;KAC1C;AACH"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}