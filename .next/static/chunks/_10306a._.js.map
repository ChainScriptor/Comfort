{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/env.ts"],"sourcesContent":["export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2024-12-23'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n"],"names":[],"mappings":";;;;;AACE;AADK,MAAM,aACX,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,8BAA8B,IAAI;AAEzC,MAAM,UAAU,4DAErB;AAGK,MAAM,YAAY,0DAEvB;AAGF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/blockContentType.ts"],"sourcesContent":["import {defineType, defineArrayMember} from 'sanity'\nimport {ImageIcon} from '@sanity/icons'\n\n/**\n * This is the schema type for block content used in the post document type\n * Importing this type into the studio configuration's `schema` property\n * lets you reuse it in other document types with:\n *  {\n *    name: 'someName',\n *    title: 'Some title',\n *    type: 'blockContent'\n *  }\n */\n\nexport const blockContentType = defineType({\n  title: 'Block Content',\n  name: 'blockContent',\n  type: 'array',\n  of: [\n    defineArrayMember({\n      type: 'block',\n      // Styles let you define what blocks can be marked up as. The default\n      // set corresponds with HTML tags, but you can set any title or value\n      // you want, and decide how you want to deal with it where you want to\n      // use your content.\n      styles: [\n        {title: 'Normal', value: 'normal'},\n        {title: 'H1', value: 'h1'},\n        {title: 'H2', value: 'h2'},\n        {title: 'H3', value: 'h3'},\n        {title: 'H4', value: 'h4'},\n        {title: 'Quote', value: 'blockquote'},\n      ],\n      lists: [{title: 'Bullet', value: 'bullet'}],\n      // Marks let you mark up inline text in the Portable Text Editor\n      marks: {\n        // Decorators usually describe a single property – e.g. a typographic\n        // preference or highlighting\n        decorators: [\n          {title: 'Strong', value: 'strong'},\n          {title: 'Emphasis', value: 'em'},\n        ],\n        // Annotations can be any object structure – e.g. a link or a footnote.\n        annotations: [\n          {\n            title: 'URL',\n            name: 'link',\n            type: 'object',\n            fields: [\n              {\n                title: 'URL',\n                name: 'href',\n                type: 'url',\n              },\n            ],\n          },\n        ],\n      },\n    }),\n    // You can add additional types here. Note that you can't use\n    // primitive types such as 'string' and 'number' in the same array\n    // as a block type.\n    defineArrayMember({\n      type: 'image',\n      icon: ImageIcon,\n      options: {hotspot: true},\n      fields: [\n        {\n          name: 'alt',\n          type: 'string',\n          title: 'Alternative Text',\n        }\n      ]\n    }),\n  ],\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAaO,MAAM,mBAAmB,CAAA,GAAA,qJAAA,CAAA,aAAU,AAAD,EAAE;IACzC,OAAO;IACP,MAAM;IACN,MAAM;IACN,IAAI;QACF,CAAA,GAAA,qJAAA,CAAA,oBAAiB,AAAD,EAAE;YAChB,MAAM;YACN,qEAAqE;YACrE,qEAAqE;YACrE,sEAAsE;YACtE,oBAAoB;YACpB,QAAQ;gBACN;oBAAC,OAAO;oBAAU,OAAO;gBAAQ;gBACjC;oBAAC,OAAO;oBAAM,OAAO;gBAAI;gBACzB;oBAAC,OAAO;oBAAM,OAAO;gBAAI;gBACzB;oBAAC,OAAO;oBAAM,OAAO;gBAAI;gBACzB;oBAAC,OAAO;oBAAM,OAAO;gBAAI;gBACzB;oBAAC,OAAO;oBAAS,OAAO;gBAAY;aACrC;YACD,OAAO;gBAAC;oBAAC,OAAO;oBAAU,OAAO;gBAAQ;aAAE;YAC3C,gEAAgE;YAChE,OAAO;gBACL,qEAAqE;gBACrE,6BAA6B;gBAC7B,YAAY;oBACV;wBAAC,OAAO;wBAAU,OAAO;oBAAQ;oBACjC;wBAAC,OAAO;wBAAY,OAAO;oBAAI;iBAChC;gBACD,uEAAuE;gBACvE,aAAa;oBACX;wBACE,OAAO;wBACP,MAAM;wBACN,MAAM;wBACN,QAAQ;4BACN;gCACE,OAAO;gCACP,MAAM;gCACN,MAAM;4BACR;yBACD;oBACH;iBACD;YACH;QACF;QACA,6DAA6D;QAC7D,kEAAkE;QAClE,mBAAmB;QACnB,CAAA,GAAA,qJAAA,CAAA,oBAAiB,AAAD,EAAE;YAChB,MAAM;YACN,MAAM,qJAAA,CAAA,YAAS;YACf,SAAS;gBAAC,SAAS;YAAI;YACvB,QAAQ;gBACN;oBACE,MAAM;oBACN,MAAM;oBACN,OAAO;gBACT;aACD;QACH;KACD;AACH"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/categoryType.ts"],"sourcesContent":["import {TagIcon} from '@sanity/icons'\nimport {defineField, defineType} from 'sanity'\n\nexport const categoryType = defineType({\n  name: 'category',\n  title: 'Category',\n  type: 'document',\n  icon: TagIcon,\n  fields: [\n    defineField({\n      name: 'title',\n      type: 'string',\n    }),\n    defineField({\n      name: 'slug',\n      type: 'slug',\n      options: {\n        source: 'title',\n      },\n    }),\n    defineField({\n      name: 'description',\n      type: 'text',\n    }),\n  ],\n})\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGO,MAAM,eAAe,CAAA,GAAA,qJAAA,CAAA,aAAU,AAAD,EAAE;IACrC,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM,qJAAA,CAAA,UAAO;IACb,QAAQ;QACN,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,SAAS;gBACP,QAAQ;YACV;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;KACD;AACH"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/postType.ts"],"sourcesContent":["import {DocumentTextIcon} from '@sanity/icons'\nimport {defineArrayMember, defineField, defineType} from 'sanity'\n\nexport const postType = defineType({\n  name: 'post',\n  title: 'Post',\n  type: 'document',\n  icon: DocumentTextIcon,\n  fields: [\n    defineField({\n      name: 'title',\n      type: 'string',\n    }),\n    defineField({\n      name: 'slug',\n      type: 'slug',\n      options: {\n        source: 'title',\n      },\n    }),\n    defineField({\n      name: 'author',\n      type: 'reference',\n      to: {type: 'author'},\n    }),\n    defineField({\n      name: 'mainImage',\n      type: 'image',\n      options: {\n        hotspot: true,\n      },\n      fields: [\n        {\n          name: 'alt',\n          type: 'string',\n          title: 'Alternative text',\n        }\n      ]\n    }),\n    defineField({\n      name: 'categories',\n      type: 'array',\n      of: [defineArrayMember({type: 'reference', to: {type: 'category'}})],\n    }),\n    defineField({\n      name: 'publishedAt',\n      type: 'datetime',\n    }),\n    defineField({\n      name: 'body',\n      type: 'blockContent',\n    }),\n  ],\n  preview: {\n    select: {\n      title: 'title',\n      author: 'author.name',\n      media: 'mainImage',\n    },\n    prepare(selection) {\n      const {author} = selection\n      return {...selection, subtitle: author && `by ${author}`}\n    },\n  },\n})\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGO,MAAM,WAAW,CAAA,GAAA,qJAAA,CAAA,aAAU,AAAD,EAAE;IACjC,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM,qJAAA,CAAA,mBAAgB;IACtB,QAAQ;QACN,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,SAAS;gBACP,QAAQ;YACV;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,IAAI;gBAAC,MAAM;YAAQ;QACrB;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,SAAS;gBACP,SAAS;YACX;YACA,QAAQ;gBACN;oBACE,MAAM;oBACN,MAAM;oBACN,OAAO;gBACT;aACD;QACH;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,IAAI;gBAAC,CAAA,GAAA,qJAAA,CAAA,oBAAiB,AAAD,EAAE;oBAAC,MAAM;oBAAa,IAAI;wBAAC,MAAM;oBAAU;gBAAC;aAAG;QACtE;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;KACD;IACD,SAAS;QACP,QAAQ;YACN,OAAO;YACP,QAAQ;YACR,OAAO;QACT;QACA,SAAQ,SAAS;YACf,MAAM,EAAC,MAAM,EAAC,GAAG;YACjB,OAAO;gBAAC,GAAG,SAAS;gBAAE,UAAU,UAAU,CAAC,GAAG,EAAE,QAAQ;YAAA;QAC1D;IACF;AACF"}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/authorType.ts"],"sourcesContent":["import {UserIcon} from '@sanity/icons'\nimport {defineArrayMember, defineField, defineType} from 'sanity'\n\nexport const authorType = defineType({\n  name: 'author',\n  title: 'Author',\n  type: 'document',\n  icon: UserIcon,\n  fields: [\n    defineField({\n      name: 'name',\n      type: 'string',\n    }),\n    defineField({\n      name: 'slug',\n      type: 'slug',\n      options: {\n        source: 'name',\n      },\n    }),\n    defineField({\n      name: 'image',\n      type: 'image',\n      options: {\n        hotspot: true,\n      },\n    }),\n    defineField({\n      name: 'bio',\n      type: 'array',\n      of: [\n        defineArrayMember({\n          type: 'block',\n          styles: [{title: 'Normal', value: 'normal'}],\n          lists: [],\n        }),\n      ],\n    }),\n  ],\n  preview: {\n    select: {\n      title: 'name',\n      media: 'image',\n    },\n  },\n})\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGO,MAAM,aAAa,CAAA,GAAA,qJAAA,CAAA,aAAU,AAAD,EAAE;IACnC,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM,qJAAA,CAAA,WAAQ;IACd,QAAQ;QACN,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;QACR;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,SAAS;gBACP,QAAQ;YACV;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,SAAS;gBACP,SAAS;YACX;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,MAAM;YACN,IAAI;gBACF,CAAA,GAAA,qJAAA,CAAA,oBAAiB,AAAD,EAAE;oBAChB,MAAM;oBACN,QAAQ;wBAAC;4BAAC,OAAO;4BAAU,OAAO;wBAAQ;qBAAE;oBAC5C,OAAO,EAAE;gBACX;aACD;QACH;KACD;IACD,SAAS;QACP,QAAQ;YACN,OAAO;YACP,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/schemaTypes/index.ts"],"sourcesContent":["import { type SchemaTypeDefinition } from 'sanity'\n\nimport {blockContentType} from './blockContentType'\nimport {categoryType} from './categoryType'\nimport {postType} from './postType'\nimport {authorType} from './authorType'\n\nexport const schema: { types: SchemaTypeDefinition[] } = {\n  types: [blockContentType, categoryType, postType, authorType],\n}\n"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;;;;;AAEO,MAAM,SAA4C;IACvD,OAAO;QAAC,4IAAA,CAAA,mBAAgB;QAAE,wIAAA,CAAA,eAAY;QAAE,oIAAA,CAAA,WAAQ;QAAE,sIAAA,CAAA,aAAU;KAAC;AAC/D"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity/structure.ts"],"sourcesContent":["import type { StructureResolver } from 'sanity/structure'\n\n// https://www.sanity.io/docs/structure-builder-cheat-sheet\nexport const structure: StructureResolver = (S) =>\n  S.list()\n    .title('Comfort Backend')\n    .items([\n      S.documentTypeListItem('category').title('Categories'),\n      S.divider(),\n      ...S.documentTypeListItems().filter(\n        (item) => item.getId() && !['category'].includes(item.getId()!),\n      ),\n    ])\n"],"names":[],"mappings":";;;AAGO,MAAM,YAA+B,CAAC,IAC3C,EAAE,IAAI,GACH,KAAK,CAAC,mBACN,KAAK,CAAC;QACL,EAAE,oBAAoB,CAAC,YAAY,KAAK,CAAC;QACzC,EAAE,OAAO;WACN,EAAE,qBAAqB,GAAG,MAAM,CACjC,CAAC,OAAS,KAAK,KAAK,MAAM,CAAC;gBAAC;aAAW,CAAC,QAAQ,CAAC,KAAK,KAAK;KAE9D"}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sefea/Desktop/build/comfort/sanity.config.ts"],"sourcesContent":["'use client'\n\n/**\n * This configuration is used to for the Sanity Studio that’s mounted on the `\\app\\studio\\[[...tool]]\\page.tsx` route\n */\n\nimport {visionTool} from '@sanity/vision'\nimport {defineConfig} from 'sanity'\nimport {structureTool} from 'sanity/structure'\n\n// Go to https://www.sanity.io/docs/api-versioning to learn how API versioning works\nimport {apiVersion, dataset, projectId} from './sanity/env'\nimport {schema} from './sanity/schemaTypes'\nimport {structure} from './sanity/structure'\n\nexport default defineConfig({\n  basePath: '/studio',\n  projectId,\n  dataset,\n  // Add and edit the content schema in the './sanity/schemaTypes' folder\n  schema,\n  plugins: [\n    structureTool({structure}),\n    // Vision is for querying with GROQ from inside the Studio\n    // https://www.sanity.io/docs/the-vision-plugin\n    visionTool({defaultApiVersion: apiVersion}),\n  ],\n})\n"],"names":[],"mappings":";;;AAUA,oFAAoF;AACpF;AACA;AACA;AANA;AACA;AANA;;CAEC,GAED;AANA;;;;;;;uCAee,CAAA,GAAA,0JAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,UAAU;IACV,WAAA,gHAAA,CAAA,YAAS;IACT,SAAA,gHAAA,CAAA,UAAO;IACP,uEAAuE;IACvE,QAAA,iIAAA,CAAA,SAAM;IACN,SAAS;QACP,CAAA,GAAA,0JAAA,CAAA,gBAAa,AAAD,EAAE;YAAC,WAAA,sHAAA,CAAA,YAAS;QAAA;QACxB,0DAA0D;QAC1D,+CAA+C;QAC/C,CAAA,GAAA,uKAAA,CAAA,aAAU,AAAD,EAAE;YAAC,mBAAmB,gHAAA,CAAA,aAAU;QAAA;KAC1C;AACH"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}